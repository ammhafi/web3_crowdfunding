import{v as C,w,x as u,y as E,z as v,F as D,H as I,I as T,C as M,_ as c,a as G,M as j,b as H,h as W,G as K,f as k,i as Z,k as b,J as B,K as _,B as s,O as A,Q as y,U as g,V as P,W as O,s as l,X as p,Y as m,Z as N,$ as J,a0 as L,a1 as Q,a2 as X,a3 as Y,a4 as tt,a5 as rt,a6 as U,A as R,a7 as et,a8 as at,a9 as S,aa as z,t as V,N as q,ab as nt}from"./index.deeadf4a.js";const x=C.object({assetContractAddress:w,tokenId:u,quantity:u.default(1),currencyContractAddress:w.default(E),pricePerToken:v,startTimestamp:D.default(new Date),endTimestamp:I,isReservedListing:C.boolean().default(!1)});class st{constructor(t,r){c(this,"featureName",_.name),c(this,"contractWrapper",void 0),c(this,"storage",void 0),c(this,"events",void 0),c(this,"interceptor",void 0),c(this,"encoder",void 0),this.contractWrapper=t,this.storage=r,this.events=new k(this.contractWrapper),this.encoder=new W(this.contractWrapper),this.interceptor=new b(this.contractWrapper)}getAddress(){return this.contractWrapper.readContract.address}async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async getAll(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllListings)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapListing(d)))}async getAllValid(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllValidListings)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapListing(d)))}async getListing(t){const r=await this.contractWrapper.readContract.getListing(t);return await this.mapListing(r)}async isBuyerApprovedForListing(t,r){if(!(await this.validateListing(s.from(t))).isReservedListing)throw new Error(`Listing ${t} is not a reserved listing.`);return await this.contractWrapper.readContract.isBuyerApprovedForListing(t,r)}async isCurrencyApprovedForListing(t,r){return await this.validateListing(s.from(t)),await this.contractWrapper.readContract.isCurrencyApprovedForListing(t,r)}async currencyPriceForListing(t,r){const e=await this.validateListing(s.from(t));if(r===e.currencyContractAddress)return e.pricePerToken;if(!await this.isCurrencyApprovedForListing(t,r))throw new Error(`Currency ${r} is not approved for Listing ${t}.`);return await this.contractWrapper.readContract.currencyPriceForListing(t,r)}async createListing(t){const r=x.parse(t);await y(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await g(this.contractWrapper.getProvider(),r.pricePerToken,r.currencyContractAddress),n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(n)&&(r.startTimestamp=s.from(n));const i=await this.contractWrapper.sendTransaction("createListing",[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:P(r.currencyContractAddress),pricePerToken:e,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp,reserved:r.isReservedListing}],{gasLimit:5e5});return{id:this.contractWrapper.parseLogs("NewListing",i==null?void 0:i.logs)[0].args.listingId,receipt:i}}async updateListing(t,r){const e=x.parse(r);await y(this.contractWrapper,this.getAddress(),e.assetContractAddress,e.tokenId,await this.contractWrapper.getSignerAddress());const a=await g(this.contractWrapper.getProvider(),e.pricePerToken,e.currencyContractAddress),n=await this.contractWrapper.sendTransaction("updateListing",[t,{assetContract:e.assetContractAddress,tokenId:e.tokenId,quantity:e.quantity,currency:P(e.currencyContractAddress),pricePerToken:a,startTimestamp:e.startTimestamp,endTimestamp:e.endTimestamp,reserved:e.isReservedListing}],{gasLimit:5e5});return{id:this.contractWrapper.parseLogs("UpdatedListing",n==null?void 0:n.logs)[0].args.listingId,receipt:n}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelListing",[t])}}async buyFromListing(t,r,e){const a=await this.validateListing(s.from(t)),{valid:n,error:i}=await this.isStillValidListing(a,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${i}`);const o=e||await this.contractWrapper.getSignerAddress(),d=s.from(r),h=s.from(a.pricePerToken).mul(d),f=await this.contractWrapper.getCallOverrides()||{};return await O(this.contractWrapper,h,a.currencyContractAddress,f),{receipt:await this.contractWrapper.sendTransaction("buyFromListing",[t,o,d,a.currencyContractAddress,h],f)}}async approveBuyerForReservedListing(t,r){if(await this.isBuyerApprovedForListing(t,r))throw new Error(`Buyer ${r} already approved for listing ${t}.`);return{receipt:await this.contractWrapper.sendTransaction("approveBuyerForListing",[t,r,!0])}}async revokeBuyerApprovalForReservedListing(t,r){if(await this.isBuyerApprovedForListing(t,r))return{receipt:await this.contractWrapper.sendTransaction("approveBuyerForListing",[t,r,!1])};throw new Error(`Buyer ${r} not approved for listing ${t}.`)}async approveCurrencyForListing(t,r,e){const a=await this.validateListing(s.from(t));r===a.currencyContractAddress&&l(e===a.pricePerToken,"Approving listing currency with a different price.");const n=await this.contractWrapper.readContract.currencyPriceForListing(t,r);return l(e===n,"Currency already approved with this price."),{receipt:await this.contractWrapper.sendTransaction("approveCurrencyForListing",[t,r,e])}}async revokeCurrencyApprovalForListing(t,r){const e=await this.validateListing(s.from(t));if(r===e.currencyContractAddress)throw new Error("Can't revoke approval for main listing currency.");const a=await this.contractWrapper.readContract.currencyPriceForListing(t,r);return l(!a.isZero(),"Currency not approved."),{receipt:await this.contractWrapper.sendTransaction("approveCurrencyForListing",[t,r,s.from(0)])}}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){let r=p.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.startTimestamp).gt(a)?p.Created:s.from(t.endTimestamp).lt(a)?p.Expired:p.Active;break;case 2:r=p.Completed;break;case 3:r=p.Cancelled;break}return{assetContractAddress:t.assetContract,currencyContractAddress:t.currency,pricePerToken:t.pricePerToken.toString(),currencyValuePerToken:await m(this.contractWrapper.getProvider(),t.currency,t.pricePerToken),id:t.listingId.toString(),tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),startTimeInSeconds:s.from(t.startTimestamp).toNumber(),asset:await N(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:s.from(t.endTimestamp).toNumber(),creatorAddress:t.listingCreator,isReservedListing:t.reserved,status:r}}async isStillValidListing(t,r){if(!await J(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.creatorAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=new L(t.assetContractAddress,Q,a),i=await n.supportsInterface(X),o=await n.supportsInterface(Y);if(i){const h=(await new L(t.assetContractAddress,tt,a).ownerOf(t.tokenId)).toLowerCase()===t.creatorAddress.toLowerCase();return{valid:h,error:h?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(o){const f=(await new L(t.assetContractAddress,rt,a).balanceOf(t.creatorAddress,t.tokenId)).gte(r||t.quantity);return{valid:f,error:f?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}applyFilter(t,r){let e=[...t];return r&&(r.seller&&(e=e.filter(a=>{var n;return a.listingCreator.toString().toLowerCase()===((n=r==null?void 0:r.seller)==null?void 0:n.toString().toLowerCase())})),r.tokenContract&&(e=e.filter(a=>{var n;return a.assetContract.toString().toLowerCase()===((n=r==null?void 0:r.tokenContract)==null?void 0:n.toString().toLowerCase())})),r.tokenId!==void 0&&(e=e.filter(a=>{var n;return a.tokenId.toString()===((n=r==null?void 0:r.tokenId)==null?void 0:n.toString())}))),(r==null?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}}const ot=C.object({assetContractAddress:w,tokenId:u,quantity:u.default(1),currencyContractAddress:w.default(E),minimumBidAmount:v,buyoutBidAmount:v,timeBufferInSeconds:u.default(900),bidBufferBps:u.default(500),startTimestamp:D.default(new Date),endTimestamp:I});class it{constructor(t,r){c(this,"featureName",U.name),c(this,"contractWrapper",void 0),c(this,"storage",void 0),c(this,"events",void 0),c(this,"interceptor",void 0),c(this,"encoder",void 0),this.contractWrapper=t,this.storage=r,this.events=new k(this.contractWrapper),this.encoder=new W(t),this.interceptor=new b(this.contractWrapper)}getAddress(){return this.contractWrapper.readContract.address}async getTotalCount(){return await this.contractWrapper.readContract.totalAuctions()}async getAll(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllAuctions)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapAuction(d)))}async getAllValid(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllValidAuctions)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapAuction(d)))}async getAuction(t){const r=await this.contractWrapper.readContract.getAuction(t);return await this.mapAuction(r)}async getWinningBid(t){await this.validateAuction(s.from(t));const r=await this.contractWrapper.readContract.getWinningBid(t);if(r._bidder!==R)return await this.mapBid(t.toString(),r._bidder,r._currency,r._bidAmount.toString())}async isWinningBid(t,r){return await this.contractWrapper.readContract.isNewWinningBid(t,r)}async getWinner(t){const r=await this.validateAuction(s.from(t)),e=await this.contractWrapper.readContract.getWinningBid(t),a=s.from(Math.floor(Date.now()/1e3)),n=s.from(r.endTimeInSeconds);if(a.gt(n)&&e._bidder!==R)return e._bidder;const o=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(d=>d.args.auctionId.eq(s.from(t)));if(!o)throw new Error(`Could not find auction with ID ${t} in closed auctions`);return o.args.winningBidder}async createAuction(t){const r=ot.parse(t);await y(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await g(this.contractWrapper.getProvider(),r.buyoutBidAmount,r.currencyContractAddress),a=await g(this.contractWrapper.getProvider(),r.minimumBidAmount,r.currencyContractAddress),i=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(i)&&(r.startTimestamp=s.from(i));const o=await this.contractWrapper.sendTransaction("createAuction",[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:P(r.currencyContractAddress),minimumBidAmount:a,buyoutBidAmount:e,timeBufferInSeconds:r.timeBufferInSeconds,bidBufferBps:r.bidBufferBps,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp}],{gasLimit:5e5});return{id:this.contractWrapper.parseLogs("NewAuction",o==null?void 0:o.logs)[0].args.auctionId,receipt:o}}async buyoutAuction(t){const r=await this.validateAuction(s.from(t)),e=await et(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid(t,at(r.buyoutBidAmount,e.decimals))}async makeBid(t,r){const e=await this.validateAuction(s.from(t)),a=await g(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(s.from(0)))throw new Error("Cannot make a bid with 0 value");if(a.gt(e.buyoutBidAmount))throw new Error("Bid amount must be less than or equal to buyoutBidAmount");if(await this.getWinningBid(t)){const o=await this.isWinningBid(t,a);l(o,"Bid price is too low based on the current winning bid and the bid buffer")}else{const o=a,d=s.from(e.minimumBidAmount);l(o.gte(d),"Bid price is too low based on minimum bid amount")}const i=await this.contractWrapper.getCallOverrides()||{};return await O(this.contractWrapper,a,e.currencyContractAddress,i),{receipt:await this.contractWrapper.sendTransaction("bidInAuction",[t,a],i)}}async cancelAuction(t){if(await this.getWinningBid(t))throw new Error("Bids already made.");return{receipt:await this.contractWrapper.sendTransaction("cancelAuction",[t])}}async closeAuctionForBidder(t,r){r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateAuction(s.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("collectAuctionTokens",[s.from(t)])}}catch(a){throw a.message.includes("Marketplace: auction still active.")?new S(t.toString(),e.endTimeInSeconds.toString()):a}}async closeAuctionForSeller(t){const r=await this.validateAuction(s.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("collectAuctionPayout",[s.from(t)])}}catch(e){throw e.message.includes("Marketplace: auction still active.")?new S(t.toString(),r.endTimeInSeconds.toString()):e}}async executeSale(t){const r=await this.validateAuction(s.from(t));try{const e=await this.getWinningBid(t);l(e,"No winning bid found");const a=this.encoder.encode("collectAuctionPayout",[t]),n=this.encoder.encode("collectAuctionTokens",[t]);return await this.contractWrapper.multiCall([a,n])}catch(e){throw e.message.includes("Marketplace: auction still active.")?new S(t.toString(),r.endTimeInSeconds.toString()):e}}async getBidBufferBps(t){return(await this.getAuction(t)).bidBufferBps}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(t),this.getWinningBid(t),await this.validateAuction(s.from(t))]),n=e?s.from(e.bidAmount):s.from(a.minimumBidAmount),i=n.add(n.mul(r).div(1e4));return m(this.contractWrapper.getProvider(),a.currencyContractAddress,i)}async validateAuction(t){try{return await this.getAuction(t)}catch(r){throw console.error(`Error getting the auction with id ${t}`),r}}async mapAuction(t){let r=p.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.startTimestamp).gt(a)?p.Created:s.from(t.endTimestamp).lt(a)?p.Expired:p.Active;break;case 2:r=p.Completed;break;case 3:r=p.Cancelled;break}return{id:t.auctionId.toString(),creatorAddress:t.auctionCreator,assetContractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),currencyContractAddress:t.currency,minimumBidAmount:t.minimumBidAmount.toString(),minimumBidCurrencyValue:await m(this.contractWrapper.getProvider(),t.currency,t.minimumBidAmount),buyoutBidAmount:t.buyoutBidAmount.toString(),buyoutCurrencyValue:await m(this.contractWrapper.getProvider(),t.currency,t.buyoutBidAmount),timeBufferInSeconds:s.from(t.timeBufferInSeconds).toNumber(),bidBufferBps:s.from(t.bidBufferBps).toNumber(),startTimeInSeconds:s.from(t.startTimestamp).toNumber(),endTimeInSeconds:s.from(t.endTimestamp).toNumber(),asset:await N(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),status:r}}async mapBid(t,r,e,a){return{auctionId:t,bidderAddress:r,currencyContractAddress:e,bidAmount:a,bidAmountCurrencyValue:await m(this.contractWrapper.getProvider(),e,a)}}applyFilter(t,r){let e=[...t];return r&&(r.seller&&(e=e.filter(a=>{var n;return a.auctionCreator.toString().toLowerCase()===((n=r==null?void 0:r.seller)==null?void 0:n.toString().toLowerCase())})),r.tokenContract&&(e=e.filter(a=>{var n;return a.assetContract.toString().toLowerCase()===((n=r==null?void 0:r.tokenContract)==null?void 0:n.toString().toLowerCase())})),r.tokenId!==void 0&&(e=e.filter(a=>{var n;return a.tokenId.toString()===((n=r==null?void 0:r.tokenId)==null?void 0:n.toString())}))),(r==null?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}}const ct=C.object({assetContractAddress:w,tokenId:u,quantity:u.default(1),currencyContractAddress:w.default(E),totalPrice:v,endTimestamp:I});class dt{constructor(t,r){c(this,"featureName",z.name),c(this,"contractWrapper",void 0),c(this,"storage",void 0),c(this,"events",void 0),c(this,"interceptor",void 0),c(this,"encoder",void 0),this.contractWrapper=t,this.storage=r,this.events=new k(this.contractWrapper),this.encoder=new W(t),this.interceptor=new b(this.contractWrapper)}getAddress(){return this.contractWrapper.readContract.address}async getTotalCount(){return await this.contractWrapper.readContract.totalOffers()}async getAll(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllOffers)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapOffer(d)))}async getAllValid(t){const r=await this.getTotalCount();let e=s.from((t==null?void 0:t.start)||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let n=[];n=(await A(e,a,this.contractWrapper.readContract.getAllValidOffers)).flat();const o=this.applyFilter(n,t);return await Promise.all(o.map(d=>this.mapOffer(d)))}async getOffer(t){const r=await this.contractWrapper.readContract.getOffer(t);return await this.mapOffer(r)}async makeOffer(t){const r=ct.parse(t),e=await this.contractWrapper.getChainID(),a=V(r.currencyContractAddress)?q[e].wrapped.address:r.currencyContractAddress,n=await g(this.contractWrapper.getProvider(),r.totalPrice,a),i=await this.contractWrapper.getCallOverrides();await O(this.contractWrapper,n,a,i);const o=await this.contractWrapper.sendTransaction("makeOffer",[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:a,totalPrice:n,expirationTimestamp:r.endTimestamp}],{gasLimit:5e5});return{id:this.contractWrapper.parseLogs("NewOffer",o==null?void 0:o.logs)[0].args.offerId,receipt:o}}async cancelOffer(t){return{receipt:await this.contractWrapper.sendTransaction("cancelOffer",[t])}}async acceptOffer(t){const r=await this.validateOffer(s.from(t)),{valid:e,error:a}=await this.isStillValidOffer(r);if(!e)throw new Error(`Offer ${t} is no longer valid. ${a}`);const n=await this.contractWrapper.getCallOverrides()||{};return await y(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress()),{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t],n)}}async validateOffer(t){try{return await this.getOffer(t)}catch(r){throw console.error(`Error getting the offer with id ${t}`),r}}async mapOffer(t){let r=p.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.expirationTimestamp).lt(a)?p.Expired:p.Active;break;case 2:r=p.Completed;break;case 3:r=p.Cancelled;break}return{id:t.offerId.toString(),offerorAddress:t.offeror,assetContractAddress:t.assetContract,currencyContractAddress:t.currency,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),totalPrice:t.totalPrice.toString(),currencyValue:await m(this.contractWrapper.getProvider(),t.currency,t.totalPrice),asset:await N(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:s.from(t.expirationTimestamp).toNumber(),status:r}}async isStillValidOffer(t){if(s.from(Math.floor(Date.now()/1e3)).gt(t.endTimeInSeconds))return{valid:!1,error:`Offer with ID ${t.id} has expired`};const e=await this.contractWrapper.getChainID(),a=V(t.currencyContractAddress)?q[e].wrapped.address:t.currencyContractAddress,n=this.contractWrapper.getProvider(),i=new M(n,a,nt,{});return(await i.readContract.balanceOf(t.offerorAddress)).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} doesn't have enough balance of token ${a}`}:(await i.readContract.allowance(t.offerorAddress,this.getAddress())).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} hasn't approved enough amount of token ${a}`}:{valid:!0,error:""}}applyFilter(t,r){let e=[...t];return r&&(r.offeror&&(e=e.filter(a=>{var n;return a.offeror.toString().toLowerCase()===((n=r==null?void 0:r.offeror)==null?void 0:n.toString().toLowerCase())})),r.tokenContract&&(e=e.filter(a=>{var n;return a.assetContract.toString().toLowerCase()===((n=r==null?void 0:r.tokenContract)==null?void 0:n.toString().toLowerCase())})),r.tokenId!==void 0&&(e=e.filter(a=>{var n;return a.tokenId.toString()===((n=r==null?void 0:r.tokenId)==null?void 0:n.toString())}))),(r==null?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}}class F{get directListings(){return T(this.detectDirectListings(),_)}get englishAuctions(){return T(this.detectEnglishAuctions(),U)}get offers(){return T(this.detectOffers(),z)}get chainId(){return this._chainId}constructor(t,r,e){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new M(t,r,n,a);c(this,"abi",void 0),c(this,"contractWrapper",void 0),c(this,"storage",void 0),c(this,"encoder",void 0),c(this,"events",void 0),c(this,"estimator",void 0),c(this,"platformFees",void 0),c(this,"metadata",void 0),c(this,"roles",void 0),c(this,"interceptor",void 0),c(this,"_chainId",void 0),this._chainId=i,this.abi=n,this.contractWrapper=o,this.storage=e,this.metadata=new G(this.contractWrapper,j,this.storage),this.roles=new H(this.contractWrapper,F.contractRoles),this.encoder=new W(this.contractWrapper),this.estimator=new K(this.contractWrapper),this.events=new k(this.contractWrapper),this.platformFees=new Z(this.contractWrapper),this.interceptor=new b(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async call(t){for(var r=arguments.length,e=new Array(r>1?r-1:0),a=1;a<r;a++)e[a-1]=arguments[a];return this.contractWrapper.call(t,...e)}detectDirectListings(){if(B(this.contractWrapper,"DirectListings"))return new st(this.contractWrapper,this.storage)}detectEnglishAuctions(){if(B(this.contractWrapper,"EnglishAuctions"))return new it(this.contractWrapper,this.storage)}detectOffers(){if(B(this.contractWrapper,"Offers"))return new dt(this.contractWrapper,this.storage)}}c(F,"contractRoles",["admin","lister","asset"]);export{F as MarketplaceV3};
